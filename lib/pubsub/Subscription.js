// Generated by CoffeeScript 1.12.3
(function() {
  var AsyncBinaryState, EventEmitter, Subscription, bluebird, regexEscape,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AsyncBinaryState = require("../AsyncBinaryState");

  bluebird = require("bluebird");

  regexEscape = require("escape-string-regexp");

  EventEmitter = require("events").EventEmitter;

  module.exports = Subscription = (function(superClass) {
    extend(Subscription, superClass);

    function Subscription(subscriber, topic1) {
      var atom, atoms;
      this.subscriber = subscriber;
      this.topic = topic1;
      this._message = bind(this._message, this);
      this._state = new AsyncBinaryState();
      atoms = (function() {
        var i, len, ref, results;
        ref = this.topic.split(".");
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          atom = ref[i];
          switch (atom) {
            case "*":
              results.push("(.+)");
              break;
            case "?":
              results.push("([^.]+)");
              break;
            default:
              results.push(regexEscape(atom));
          }
        }
        return results;
      }).call(this);
      this._pattern = new RegExp("^" + (atoms.join(regexEscape("."))) + "$");
    }

    Subscription.prototype.enable = function() {
      return this._state.setOn((function(_this) {
        return function() {
          return _this.subscriber.subscribe(_this.topic).then(function() {
            return _this.subscriber.on("message." + _this.topic, _this._message);
          });
        };
      })(this));
    };

    Subscription.prototype.disable = function() {
      return this._state.setOff((function(_this) {
        return function() {
          return _this.subscriber.unsubscribe(_this.topic).then(function() {
            return _this.subscriber.removeListener("message." + _this.topic, _this._message);
          });
        };
      })(this));
    };

    Subscription.prototype.match = function(topic) {
      return this._pattern.test(topic);
    };

    Subscription.prototype._message = function(topic, payload) {
      return this.emit("message", topic, payload);
    };

    return Subscription;

  })(EventEmitter);

}).call(this);

//# sourceMappingURL=Subscription.js.map
